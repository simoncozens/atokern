#!/usr/bin/env python3
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

import tensorflow as tf
from tensorflow.keras.layers import Input, Embedding, Dense, Dropout, Flatten, BatchNormalization, Activation, concatenate, Conv2D, MaxPooling2D
from tensorflow.keras.models import Model
from tensorfont import Font
import tensorflow.keras
import numpy as np
import argparse
import string
from tqdm import tqdm
from termcolor import colored
import urllib

class DownloadProgressBar(tqdm):
    def update_to(self, b=1, bsize=1, tsize=None):
        if tsize is not None:
            self.total = tsize
        self.update(b * bsize - self.n)

def download_url(url, output_path):
    with DownloadProgressBar(unit='B', unit_scale=True,
                             miniters=1, desc=url.split('/')[-1]) as t:
        urllib.request.urlretrieve(url, filename=output_path, reporthook=t.update_to)

tf.logging.set_verbosity(tf.logging.ERROR)

if not os.path.exists("badkerndetector.hdf5"):
  print("Downloading bad kern detection model")
  download_url("http://dealer.simon-cozens.org/~simon/badkerndetector.hdf5", "badkerndetector.hdf5")

batch_size = 16
box_height = 160
box_width = 550
font_xheight = 50
tolerance = 0.7

def tolerance_value(x):
    x = float(x)
    if x < 0.0 or x > 1.0:
        raise argparse.ArgumentTypeError("%r not in range [0.0, 1.0]"%(x,))
    return x

parser = argparse.ArgumentParser(description='Check for bad kerning pairs.')
parser.add_argument('fontfile', metavar='font', help='The OTF file to check')
parser.add_argument('--left', dest='left',
                    default=string.ascii_uppercase,
                    help='left glyphs to check. Use "<lc>" for a-z, "<uc>" for A-Z (default: <uc>)')
parser.add_argument('--right', dest='right',
                    default=string.ascii_uppercase,
                    help='right glyphs to check (default: <uc>)')
parser.add_argument('--tolerance', dest='tolerance',type=tolerance_value,
                    default=0.70,
                    help='confidence required before reporting a pair (default: 0.70)')
args = parser.parse_args()

args.left = args.left.replace("<uc>", string.ascii_uppercase)
args.left = args.left.replace("<lc>", string.ascii_lowercase)
args.right = args.right.replace("<uc>", string.ascii_uppercase)
args.right = args.right.replace("<lc>", string.ascii_lowercase)


print("Loading %s" % args.fontfile)
f = Font(args.fontfile, font_xheight)

def pad_to_size(font,l):
  padding_width = (box_width - l.shape[1]) / 2.0
  padding_height = (box_height - l.shape[0])
  padding_height_top = font.baseline_ratio * padding_height
  padding_height_bottom = (1-font.baseline_ratio) * padding_height
  padding = ((int(np.ceil(padding_height_top)), int(np.floor(padding_height_bottom))), (int(np.ceil(padding_width)), int(np.floor(padding_width))))
  if np.any(np.array(padding) <0):
    print("Font %s produced a string that was too wide/high" % font.filename)
    return None
  padded = np.pad(l, padding, "constant")
  return padded

def convmatrix(matrix):
  return matrix.reshape((box_height,box_width,1))

def get_image(f,left,right):
  s = "OH"+left+right+"HO"
  img = pad_to_size(f,f.set_string(s,{ (left,right): f.pair_distance(left,right) }))
  return np.clip(img,0,1)

images = []
pairs = []

for l in args.left:
  for r in args.right:
    images.append(convmatrix(get_image(f,l,r)))
    pairs.append((l,r))
      #pbar.update(1)

model = tf.keras.models.load_model("badkerndetector.hdf5")

category,regression = model.predict({"string_image":np.array(images)},batch_size = batch_size, verbose=1)
output = []
for i,pred in enumerate(zip(category,regression)):
  c,r = pred
  if c[0] >= args.tolerance:
    output.append((pairs[i], colored("tight","red"), c[0],r[0]))
  if c[2] >= args.tolerance:
    output.append((pairs[i], colored("loose","green"), c[2],r[0]))
for n in sorted(output,key=lambda p: -p[2]):
  print("%s%s too %s (confidence %.2f): adjust by %s units" % (n[0][0],n[0][1],n[1],n[2],colored(int(-n[3]*120),"yellow")))
